package fi.beans.minitbeans;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.util.Vector;class QuitGlue extends WindowAdapter{    ActionListener al;    QuitGlue(ActionListener alin)    {        al = alin;    }    public void windowClosing(WindowEvent e)    {        al.actionPerformed(new ActionEvent(e.getSource(), ActionEvent.ACTION_PERFORMED, "quit"));    }}/** Frame that knows how disable its save menu. */class MiniFrame extends Frame{    private MenuItem saveItem;    MiniFrame(String s)    {        super(s);    }    public void enableSave(boolean b)    {        if(saveItem!=null)        {            saveItem.setEnabled(b);        }    }}public class util{    /** Preferred width of graph widget */    public static int prefGraphWidth = 600;    /** Preferred height of graph widget */    public static int prefGraphHeight = 300;    /** Resize the graph - or any widget - to the preferred dimenions */    public static void setPrefSize(Component graph)    {        graph.resize(prefGraphWidth, prefGraphHeight);    }    /** Constructs a "generic" window with title and menubar.     <br>     ActionListener AL receives the following events:     <ul> <li> "new"     <li> "open"     <li> "save"     <li> "saveas"     <li> "print"     <li> "quit"     </ul>     */    /**     Deal with unexpexpected exceptions.     Production version can generate a bug report.     For now we just print to System.out     */    public static void bugReport(Exception e)    {        System.out.println("Nobody expects the Spanish Inquisition! "+e);        e.printStackTrace();    }    private static MBText t;    private static void loadlang(String s)    {        s = s.toLowerCase();        try        {            t = (MBText)Class.forName("fi.beans.minitbeans.MBText_"+s).newInstance();        }        catch(Exception e)        {            System.out.println("Sorry, my "+s+" is a bit rusty "+e);        }    }    public static MBText getLangStrings()    {        if(t==null)        {            // Start out with English.            // That way we always have strings even if locale specifies            // - say - Icelandic            loadlang("en");            loadlang(System.getProperty("user.language", "en"));        }        return t;    }    public static MiniFrame hoofdFrame(String title, ActionListener al)    {//      Frame mainframe = new Frame(title);        MiniFrame mainframe = new MiniFrame(title);        t = getLangStrings();        mainframe.addWindowListener(new QuitGlue(al));// MENU        MenuBar mb = new MenuBar();        Menu fileMenu = new Menu(t.filem);        MenuItem newFile = new MenuItem(t.nuw);        newFile.addActionListener(al);        newFile.setActionCommand("new");//        fileMenu.add(newFile);        MenuItem opeFile = new MenuItem(t.open);        opeFile.addActionListener(al);        opeFile.setActionCommand("open");//        fileMenu.add(opeFile);        MenuItem savFile = new MenuItem(t.save);        savFile.addActionListener(al);        savFile.setActionCommand("save");//        fileMenu.add(savFile);        savFile = new MenuItem(t.saveas);        savFile.addActionListener(al);        savFile.setActionCommand("saveas");//        fileMenu.add(savFile);        MenuItem priFile = new MenuItem(t.print);        priFile.addActionListener(al);        priFile.setActionCommand("print");//        fileMenu.add(priFile);        MenuItem quiFile = new MenuItem(t.quit);        quiFile.addActionListener(al);        quiFile.setActionCommand("quit");//        fileMenu.add(quiFile);//        mb.add(fileMenu);        mainframe.setMenuBar(mb);        mainframe.enableSave(false);        return mainframe;    }    public static Vector streamToVec(java.io.InputStream is)    {        java.io.DataInputStream dis = new java.io.DataInputStream(is);        Vector v = new Vector();        try        {            String s;            while(null!=(s = dis.readLine()))            {//	System.out.println("Stovec: " + s );                v.addElement(s);            }        }        catch(Exception barst)        {            bugReport(barst);        }        return v;    }    /**     Locate a resource file.     @param m        Some object which is loaded the same way as the resource.     @param filename Name of the file     @return An empty string if failure.     */    static public String locateResource(Object m, String filename)    {        java.net.URL us = m.getClass().getResource(filename);        if(us==null)        {            System.out.println("DID NOT FIND RESOURCE "+filename);            return "";                   //        }//      System.out.println("US=" +us);//      System.out.println("filename=" + us.getFile());        String wd = wd = us.getFile();        /* Massage URL to local convention. This is non-portable, but         it should at least work for Mac & MS      */        // voor windows staat er:  /c:/blabla        // kun je testen op path_sep        // unix heeft wat je verwachten zou        // mac heeft? 1e / weg en dan replace        String sep = System.getProperties().getProperty("file.separator");        if("\\".equals(sep) || ":".equals(sep))        {            wd = wd.replace('/', sep.charAt(0));            wd = wd.substring(1);        }        return wd;    }    /**     Discard "FILE" from start of string.     Needed for broken JDKs with return crazy filenames when locating     resources. You get something like FILEpartofdir\+\moreofdir     <p/>     On second thought: I surrender. Now policy is to bundle JRE 1.2     with the tools so that we don't have to bother about older versions     anymore.     */    static public String fixFILE(String s)    {        if(s.startsWith("FILE"))        {            String sep = System.getProperties().getProperty("file.separator");            s = s.replace('+', sep.charAt(0));            // now we have multiple path separators. Ok for Posix. Ok for            // ms-windows. How about Mac?            s = s.substring(4);            if(s.charAt(0)=='.')            {                return System.getProperty("user.dir")+sep+s.substring(1);            }        }        return s;    }    /**     Locate a resource directory given the name of a file in that directory.     @param m        Some object which is loaded the same way as the resource.     @param filename Name of the file. MUST exist.     <p/>     <br>     Typically used to figure out a sensible starting directory for save/load     dialogs.     */    static public String locateResourceDir(Object m, String filename)    {        java.io.File f = new java.io.File(locateResource(m, filename));        return fixFILE(f.getParent());    }}